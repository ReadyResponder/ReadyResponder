require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe TextsController, type: :controller do

  let(:person){FactoryGirl.build :person}
  let(:department){FactoryGirl.build :department}

  describe "POST #receive_text" do
    it "renders an info message" do
      # people = FactoryGirl.create_list(:person, 3)
      event = Event.create!(title: "test info event",
                           description: "test info event desc.",
                           status: 'Scheduled',
                           category: 'Event',
                           id_code: 'iet1',
                           start_time: 3.days.from_now,
                           end_time: 4.days.from_now,
                           min_title: "Recruit",
                           departments: [department])
      channel = FactoryGirl.create(:channel,
                                    content: "+15555555555",
                                    # currently only works with US phone numbers
                                    person: person)

      params = {Body: "iNFo #{event.id_code}",
                # case of keyword shouldn't matter.
                # 1st line is thrown out
                From: "+15555555555"}
                # note the +1 that is NOT in the channel
                # Phone numbers are in E.164 format (e.g. +16175551212)
                # https://en.wikipedia.org/wiki/E.164
      post "receive_text", params
      assert_response :success
      msg = @response.body
      expect(msg.include? "Unknown Keyword").to eq false
      expect(msg.include? event.title).to eq true
      expect(msg.match(/Available: \d+/i)).to be_truthy
      expect(msg.match(/Partially Available: \d+/i)).to be_truthy
      expect(msg.match(/Unavailable: \d+/i)).to be_truthy
      expect(msg.match(/Unknown: \d+/i)).to be_truthy
    end
  end
end
